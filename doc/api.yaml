openapi: 3.0.3

info:
  version: 'latest'
  title: FoodGen - API
  description: |
    A simple API that creates random food

security:
  - BearerAuth: []

paths:
  '/ping':
    get:
      tags:
        - Health
      summary: Health check of the server
      description: Check if the server is up or not
      operationId: ping
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: Hello world
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/users':
    put:
      tags:
        - User
      summary: Create or update users
      operationId: crupdateUsers
      requestBody:
        description: List of users to be crupdated
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: return a list crupdated users.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/users/whoami':
    get:
      tags:
        - User
      summary: Tell you who you are
      operationId: whoami
      responses:
        '200':
          description: return the specific user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/users/login':
    post:
      tags:
        - User
      summary: Let user log in the application
      operationId: login
      requestBody:
        description: send user credentials to the server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: The access token
          content:
              text/plain:
                schema:
                  type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/users/signup':
    post:
      tags:
        - User
      summary: Let user sign up the application
      operationId: signup
      requestBody:
        description: send new user credentials to the server
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: The access token
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/users/logout':
    get:
      tags:
        - User
      summary: Logs out current logged in user
      operationId: logout
      responses:
        '200':
          description: Logging out
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/users/{username}':
    get:
      tags:
        - User
      summary: Get user by username
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return the specific user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/regions':
    get:
      tags:
        - Region
      summary: get all available regions
      operationId: getRegions
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: return a list of regions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Region
      summary: Create or update regions
      operationId: crupdateRegions
      requestBody:
        description: List of regions to be crupdated
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/CreateRegion'
      responses:
        '200':
          description: return a list crupdated regions.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Region'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/regions/{id}':
    get:
      tags:
        - Region
      summary: get a specific region by its id
      operationId: getRegionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return the specified region
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Region
      summary: delete a specific region by its id
      operationId: deleteRegionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: removed successfully
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/recipes/{id}':
    get:
      tags:
        - recipe
      summary: Get recipe by id
      operationId: getRecipeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return the specific recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/recipes':
    get:
      tags:
        - recipe
      summary: Get all recipes
      operationId: getRecipes
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: a list of all recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - recipe
      summary: Create or update recipes
      operationId: crupdateRecipes
      requestBody:
        description: List of recipes to be crupdated
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/CreateRecipe'
      responses:
        '200':
          description: return a list crupdated recipes.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/meals':
    get:
      tags:
        - Meal
      summary: Randomly pick meals
      operationId: getMeals
      responses:
        '200':
          description: return a list of 3 random generated meals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/meals/download/{id}':
    put:
      tags:
        - Meal
      summary: Update the download of a meal
      operationId: downloadMeals
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Meal's download updated"
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/recommendedMeals':
    get:
      tags:
        - Meal
      summary: Get a list of meals based on user's preferences
      operationId: getMealsByPreferences
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: return a list of meals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/mealsByRating':
    get:
      tags:
        - Meal
      summary: Get a list of meals based on number of downloads
      operationId: getMealsByRating
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: return a list of  meals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/mealsByCriteria':
    get:
      tags:
        - Meal
      summary: Get a list of meals by criteria
      operationId: getMealsByCriteria
      parameters:
        - name: region_name
          in: query
          required: false
          schema:
            type: string
            example: "France"
        - name: ingredients
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              example: "tomato"
      responses:
        '200':
          description: return a list of  meals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/meal/{id}':
    get:
      tags:
        - Meal
      summary: Get a meal by id
      operationId: getMealById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a meal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meal'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  '/ingredients/{id}':
    get:
      tags:
        - Ingredients
      summary: Get ingredients by id
      operationId: getIngredientsById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return a list recipe's ingredients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/ingredients':
    get:
      tags:
        - Ingredients
      summary: Get all ingredients
      operationId: getIngredients
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: name
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              example: "tomato"
      responses:
        '200':
          description: return a list of ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Ingredients
      summary: Create or update ingredients
      operationId: crupdateIngredients
      requestBody:
        description: List of ingredients to be crupdated
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/CreateIngredient'
      responses:
        '200':
          description: return a list crupdated ingredients.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Ingredient'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /allergies:
    get:
      tags:
        - Allergies
      summary: Get user's allergies
      operationId: getAllergies
      responses:
        '200':
          description: List of Allergies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Allergy'
        '400':
          description: Error when sending the request
        '404':
          description: Resources not found
        '500':
          description: Server error
    put:
      tags:
        - Allergies
      summary: Insert allergies for an user
      operationId: crupdateAllergies
      requestBody:
        description: List of allergies to be crupdated
        content:
          application/json:
            schema:
              items:
                type: string
                example: "Chicken"
      responses:
        '200':
          description: return a list of crupdated allergies.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Allergy'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /allergies/{user_id}:
    get:
      tags:
        - Allergies
      summary: Get allergy by user
      operationId: getAllergiesByUser
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of Allergies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Allergy'
        '400':
          description: Error when sending the request
        '404':
          description: Ressources not found
        '500':
          description: Server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    CreateUser:
      allOf:
        - $ref: '#/components/schemas/Auth'
      type: object
      properties:
        firstname:
          type: string
          example: "Rio"
        lastname:
          type: string
          example: "Camero"
        username:
          type: string
        password:
          type: string
        allergies:
          type: array
          items:
            type: string
        preferences:
          type: array
          items:
            type: string
    User:
      allOf:
        - $ref: '#/components/schemas/CreateUser'
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
          enum:
            - USER
            - ADMIN
    Auth:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    CreateRegion:
      type: object
      properties:
        name:
          type: string
          example: Italy
    Region:
      allOf:
        - $ref: '#/components/schemas/CreateRegion'
      type: object
      properties:
        id:
          type: string
          format: uuid
    CreateRecipe:
      type: object
      properties:
        name:
          type: string
          example: Pizza
        readme:
          type: string
          example: Bunch of text
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/RecipeIngredient'
    Recipe:
      allOf:
        - $ref: '#/components/schemas/CreateRecipe'
      type: object
      properties:
        id:
          type: string
          format: uuid
    UserPreferences :
      type: object
      properties:
        id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        ingredients:
          $ref: '#/components/schemas/Ingredient'
    CreateIngredient:
      type: object
      properties:
        name:
          type: string
          example: Tomato
    Ingredient:
      allOf:
        - $ref: '#/components/schemas/CreateIngredient'
      type: object
      properties:
        id:
          type: string
          format: uuid
    RecipeIngredient:
      allOf:
        - $ref: '#/components/schemas/CreateIngredient'
      type: object
      properties:
        measure:
          type: string
    Allergy:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ingredient_name:
          type: string
    Meal:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Pizza
        region:
          $ref: '#/components/schemas/Region'
        recipe:
          $ref: "#/components/schemas/Recipe"
        image:
          type: string
        download:
          type: integer
          example: 10

    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`

    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error